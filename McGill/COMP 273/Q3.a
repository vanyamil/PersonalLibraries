	.text
	.globl __start
	
__start:
	#Ask and receive first name
	la	$a0, ASK_FIRST
	jal	PUTS
	la	$a0, FIRST_BUFFER
	li	$a1, 100
	jal 	GETS
	
	#Ask and receive last name
	la	$a0, ASK_LAST
	jal	PUTS
	la	$a0, LAST_BUFFER
	li	$a1, 100
	jal 	GETS
	
	#Output all 4 strings
	la	$a0, ANSWER_START
	jal	PUTS
	la	$a0, LAST_BUFFER
	jal	PUTS
	la	$a0, COMMA
	jal	PUTS
	la	$a0, FIRST_BUFFER
	jal	PUTS
	
	li 	$v0, 10
	syscall
	
GETS:
	#Call GETCHAR for a maximum of 'limit' ($a1) times or until 0 or NL received
	#Store result of each GETS further into buffer ($a0)
	
	subiu	$sp, $sp, 8
	sw 	$s0, 4($sp)		#We will use s0 so save to stack
	sw	$ra, 0($sp)		#We're calling another function within, storing return address
	move	$s0, $a0		#s0 = a0, the address at which we started

GETS_LOOP:
	sub	$t0, $a0, $s0		#How many characters are we at?
	bge	$t0, $a1, GETS_END	#If we went too far, quit
	jal	GETCHAR			#Get a fresh character in v0
	beqz	$v0, GETS_END		#If the character was a null, goto END
	subi	$v0, $v0, 10
	beqz	$v0, GETS_END		#If the character was 10 (new line), goto END
	addi	$v0, $v0, 10
	sb	$v0, ($a0)		#Store it at address a0
	addiu	$a0, $a0, 1		#Increment current buffer address
	j	GETS_LOOP

GETS_END:	
	sb	$zero, ($a0)		#Store an null symbol
	sub	$v0, $a0, $s0		#How many symbols did we write?
	lw	$s0, 4($sp)		#Reload the s0
	lw	$ra, 0($sp)		#Could reload with jump but maybe this is safer
	addiu	$sp, $sp, 8		#Reset the stack
	jr	$ra
	
	
PUTS:
	#Call PUTCHAR for the entire string
	#$a0 has the buffer pointer
	
	subiu	$sp, $sp, 12
	sw 	$s0, 8($sp)	#We will use s0 so save to stack
	sw 	$s1, 4($sp)	#Same with s1
	sw	$ra, 0($sp)	#We're calling another function within, storing return address
	move	$s0, $a0	#s0 = a0, the address at which we started
	move	$s1, $a0	#s1 = a0 will be our iterator
	
PUTS_LOOP:
	lbu	$a0, ($s1)	#Load current byte
	beqz	$a0, PUTS_END	#If /0, goto END
	jal 	PUTCHAR		#Otherwise, goto PUTCHAR
	addiu	$s1, $s1, 1	#Increment our current buffer pointer
	j	PUTS_LOOP
	
PUTS_END:		
	sub	$v0, $s1, $s0	#How many symbols did we write?
	lw	$s0, 8($sp)	#Reload the s0
	lw	$s1, 4($sp)	#Reload the s1
	lw	$ra, 0($sp)	#Could reload with jump but maybe this is safer
	addiu	$sp, $sp, 12	#Reset the stack
	jr	$ra
	

GETCHAR:
	lw 	$t1, IO		# do:
	lw 	$t0, ($t1)	#   t0 = *KB
	andi 	$t0, 1		#   Detect change: if last bit is on
	beqz 	$t0, GETCHAR	# while no change
	
	lbu	$v0, 4($t1)	# v0 = *(KB+4) (i.e. keyboard data)
	jr 	$ra
	
PUTCHAR:
	lw	$t1, IO		# do:
	lw	$t0, 8($t1)	#   t0 = *DISP
	andi	$t0, 1		#   Detect open: if last bit is on
	beqz	$t0, PUTCHAR	# while cannot access display
	
	sb	$a0, 12($t1)	# send a0 to display
	jr 	$ra
	
	.data
IO:	.word 	0xFFFF0000
FIRST_BUFFER:
	.space 	100
LAST_BUFFER:
	.space 	100
ASK_FIRST:	
	.asciiz "What is your first name? "
ASK_LAST:
	.asciiz "\nWhat is your last name? "
ANSWER_START:
	.asciiz "\nYou entered: "
COMMA:	.asciiz ", "
